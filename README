Primeira parte do trabalho final de redes de computadores
Este projeto implementa o protocolo SLOW (Simple Layered Over UDP Wrapper) usando C++17. A seguir estão as bibliotecas utilizadas no projeto, suas finalidades e onde são aplicadas:

## ✅ Dependências

### C++ STL (Standard Library - já incluída com o compilador g++)

| Biblioteca     | Para que serve                                      | Onde é usada                          |
|----------------|------------------------------------------------------|----------------------------------------|
| `<iostream>`   | Entrada/saída (`std::cout`, `std::cin`)             | Impressão no terminal, debug           |
| `<vector>`     | Vetores dinâmicos                                   | Campo `data` do pacote                 |
| `<array>`      | Arrays fixos (ex: UUID)                              | Campo `sid` (UUID 16 bytes)            |
| `<cstdint>`    | Tipos inteiros com tamanho fixo (`uint32_t` etc)    | Definição de cabeçalhos de pacotes     |
| `<cstring>`    | Manipulação de memória (`memcpy`, `memcmp`)         | Serialização e parsing                 |
| `<cstdlib>`    | Funções C padrão como `rand()`                      | Geração de IDs (ex: fid)               |
| `<random>`     | Geração moderna de números aleatórios               | Gerador de UUIDs                       |
| `<chrono>`     | Utilitários de tempo (usado no UUID)                | Semente para aleatoriedade             |

### Bibliotecas POSIX (requerem Linux/WSL2/macOS/MSYS2)

| Biblioteca         | Para que serve                                      | Onde é usada                  |
|--------------------|------------------------------------------------------|----------------------------------------|
| `<sys/socket.h>`   | Criação e controle de sockets UDP                   | Envio/recebimento de pacotes           |
| `<netinet/in.h>`   | Estruturas para endereços IP e portas (`sockaddr_in`) | Definição de endereço do servidor      |
| `<arpa/inet.h>`    | Conversão entre texto/IP binário (`inet_pton`)      | IP string → binário                    |
| `<unistd.h>`       | Funções POSIX como `close()`                        | Fechamento do socket                   |

## ⚠️ Observações
- Este projeto **não roda nativamente em Windows com MinGW**, pois MinGW não inclui as bibliotecas POSIX. Use **WSL2**, **MSYS2**, ou um sistema Linux.
- Nenhuma biblioteca externa precisa ser instalada manualmente (como via vcpkg ou conan).

## ✅ Como compilar
```bash
make          # Compila o binário principal em bin/slow-peripheral
make tests    # Compila os testes
```

## ✅ Como executar
```bash
./bin/slow-peripheral --server 127.0.0.1 --port 7033 --buffer-size 4096 --session-ttl 30000
```

---